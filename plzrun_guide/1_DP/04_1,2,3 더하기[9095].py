# 네번째 DP, 알고리즘 첫날 마지막 문제
"""
2xn 타일링처럼 풀면 된다.
(조건1) d[n-1], d[n-2], d[n-3] 의 숫자는 항상 왼쪽에 고정해둬야 한다!
    그렇지 않으면 다른 경우랑 겹쳐버린다. (ex. 4에서 d[n-3](1)의 경우를 구할때, 1+3말고 3+1까지 카운트하면, d[n-1](3)의 경우의 3+1과 겹친다)
(조건2) d[n-2]라 해서 d[n-2]+1+1 는 d[n-1]+1와 겹치는 경우다!
    따라서 d[n-1]에선 d[n-1]+1, d[n-2]에선 d[n-2]+2, d[n-3]에선 d[n-3]+3 , 3가지 케이스에 대해서 각각 1가지 경우만 나올수 있다.
따라서 식은 아래와 같다.
d[n] = d[n-3] + d[n-2] + d[n-1]
"""
for _ in range(int(input())):
    n = int(input())
    d = [1, 2, 4]
    for i in range(3, n):
        d.append(d[i - 3] + d[i - 2] + d[i - 1])
    print(d[n - 1] % 10007)

"""4
(d[n-1], d[n-2], d[n-3]는 왼쪽 고정)
- 1 
1.1.1.1
1.1.2
1.2.1
1.3

- 2
2.1.1
2.2

- 3
3.1 
"""